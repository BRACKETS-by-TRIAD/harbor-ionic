#!/usr/bin/env bash

TYPE=ionic
VERSION=1.0.1

# check system if supported
UNAMEOUT="$(uname -s)"
case "${UNAMEOUT}" in
    Linux*)     MACHINE=linux;;
    Darwin*)    MACHINE=mac;;
    *)          MACHINE="UNKNOWN"
esac

if [[ "$MACHINE" == "UNKNOWN" ]]; then
    echo "Unsupported system type"
    echo "System must be a Macintosh or Linux"
    echo ""
    echo "System detection determined via uname command"
    echo "If the following is empty, could not find uname command: $(which uname)"
    echo "Your reported uname is: $(uname -s)"
fi

# making harbor command available
chmod +x ./harbor

# prepare default env variables
export DOCKER_APP_PORT=${DOCKER_APP_PORT:-8100}
export DOCKER_LIVE_RELOAD_PORT=${DOCKER_LIVE_RELOAD_PORT:-35729}

# is the environment running
PSRESULT="$(docker-compose ps -q)"
if [[ ! -z "$PSRESULT" ]]; then
    EXEC="yes"
else
    EXEC="no"
fi

# create base docker-compose command to run
COMPOSE="docker-compose -f docker-compose.yml"

# If we pass any arguments...
if [[ $# -gt 0 ]]; then

    # Source .env, which can over-ride env vars
    if [[ -f .env ]]; then
        source .env
    fi

    case "$1" in

        # Rebuild the containers
        rebuild)
            if [[ "$EXEC" == "yes" ]]; then
                shift 1
                REMOVE_IMAGES=""
                for i in "$@"
                do
                    case ${i} in
                        -i|--images)
                            REMOVE_IMAGES="--rmi all"
                            ;;

                        -v|--volumes)
                            REMOVE_VOLUMES="-v"
                            ;;

                        *)
                            ;;
                    esac
                done
                ${COMPOSE} down ${REMOVE_VOLUMES} ${REMOVE_IMAGES}
            fi
            ${COMPOSE} build
            ;;

        # If "npm" is used, run npm from our node container
        npm)
            shift 1
            ${COMPOSE} run --rm \
                node \
                npm "$@"
            ;;

        # If "ionic" is used, run ionic from our node container
        ionic)
            shift 1
            ${COMPOSE} run --service-ports --rm \
                node \
                ionic "$@"
            ;;

        # If "ionic-serve" is used, run ionic serve from our node container
        ionic-serve)
            shift 1
            ${COMPOSE} run --service-ports --rm \
                node \
                ionic serve --all --port 8100 --livereload-port 35729
            ;;

        # If "yarn" is used, run yarn from our node container
        yarn)
            shift 1
            ${COMPOSE} run --rm \
                node \
                yarn "$@"
            ;;

        # If "gulp" is used, run gulp from our node container
        gulp)
            shift 1
            ${COMPOSE} run --rm \
                node \
                ./node_modules/.bin/gulp "$@"
            ;;

        # Installing new ionic project
        new)
            case "$2" in

                # Installing new ionic project
                ionic)
                    echo "This command will install new ionic application to current folder"

                    # ionic start
                    ${COMPOSE} run --service-ports --rm \
                        node \
                        ionic start application blank --no-link

                    # move application content to this folder
                    mv application/* application/.[!.]* .
                    rm -rf ./application
                    ;;

                # If not provided, show what to use
                *)
                    echo $"Usage: $0 $1 {ionic}"
                    exit 1
                    ;;

            esac
            ;;

        # Get version
        -v|--version)
            echo ${VERSION}
            ;;

        # Get type
        -t|--type)
            echo ${TYPE}
            ;;

        # Else, pass args to docker-compose
        *)
            ${COMPOSE} "$@"
            ;;
    esac
else
    # Use the docker-compose ps command if nothing else passed through
    ${COMPOSE} ps
fi
